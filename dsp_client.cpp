/**
 * dsp_client.cpp
 *
 * Copyright (C) 2023  Pablo Alvarado
 * EL5802 Procesamiento Digital de Señales
 * Escuela de Ingeniería Electrónica
 * Tecnológico de Costa Rica
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the authors nor the names of its contributors may be
 *    used to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include "dsp_client.h"

#include <cstring>

dsp_client::dsp_client()
    : jack::client(),
      _ffilter(),
      _current_type_fft_filter(filter_type::AllPass),
      current_mode(Mode::FFTFilters) {}

dsp_client::~dsp_client() {}

jack::client_state dsp_client::init() {
  auto ret = jack::client::init();
  change_filter_type();
  return ret;
}

/**
 * The process callback for this JACK application is called in a
 * special realtime thread once for each audio cycle.
 *
 * This client does nothing more than copy data from its input
 * port to its output port. It will exit when stopped by
 * the user (e.g. using Ctrl-C on a unix-ish operating system)
 */
bool dsp_client::process(jack_nframes_t nframes, const sample_t *const in,
                         sample_t *const out) {
  switch (current_mode) {
    case Mode::Passthrough:
      passthrough(nframes, in, out);
      break;
    case Mode::LowPassFilter:
      low_pass_filter(nframes, in, out);
      break;
    case Mode::BandStopFilter:
      band_stop_filter(nframes, in, out);
      break;
    case Mode::BandPassFilter:
      band_pass_filter(nframes, in, out);
      break;
    case Mode::HighPassFilter:
      high_pass_filter(nframes, in, out);
      break;
    case Mode::FFTFilters:
      _ffilter.process(in, out);
    default:
      _ffilter.process(in, out);
      break;
  }

  return true;
}

void dsp_client::change_filter_type() {
  switch (_current_type_fft_filter) {
    case filter_type::AllPass: {
      // let the freq_filter know the length of the block_size

      std::unique_ptr<float[]> delta(new float[buffer_size()]);
      memset(delta.get(), 0, sizeof(float) * buffer_size());
      delta[0] = 1.0f;

      // let the freq_filter know the length of the block_size
      _ffilter.set_block_size(buffer_size());

      // and tell it the impulse response of the filter
      _ffilter.set_filter(delta.get(), buffer_size(), 2 * buffer_size() - 1);
    } break;
    case filter_type::Notch: {
      // let the freq_filter know the length of the block_size

      std::unique_ptr<float[]> hn(new float[buffer_size()]);
      memset(hn.get(), 0, sizeof(float) * buffer_size());

      float bk[NOTCH_SIZE] = {
          -0.0001590143074, -0.000158770039,  -0.000158286115,
          -0.0001575541974, -0.0001565648272, -0.0001553076145,
          -0.0001537711214, -0.0001519429497, -0.0001498097554,
          -0.0001473573502, -0.0001445707312, -0.0001414341677,
          -0.0001379313326, -0.00013404536,   -0.0001297590061,
          -0.0001250547793, -0.0001199150574, -0.0001143222762,
          -0.0001082590607, -0.0001017084214, -9.465392213e-05,
          -8.707985398e-05, -7.897144678e-05, -7.031505811e-05,
          -6.109834067e-05, -5.131048965e-05, -4.09423883e-05,
          -2.998683522e-05, -1.843872269e-05, -6.295228104e-06,
          6.444005066e-06,  1.97766949e-05,   3.369775732e-05,
          4.819915193e-05,  6.32697338e-05,   7.889513654e-05,
          9.505763592e-05,  0.000111736088,   0.0001289058127,
          0.0001465385285,  0.0001646023593,  0.0001830617548,
          0.0002018774831,  0.0002210067323,  0.0002404030529,
          0.0002600165026,  0.0002797936613,  0.0002996778348,
          0.0003196091275,  0.0003395246458,  0.0003593586443,
          0.0003790427872,  0.0003985063813,  0.0004176765797,
          0.0004364787601,  0.000454836787,   0.0004726733023,
          0.0004899101332,  0.0005064686993,  0.000522270333,
          0.0005372366868,  0.0005512901698,  0.0005643544137,
          0.0005763546797,  0.0005872184411,  0.0005968756741,
          0.0006052593817,  0.0006123061175,  0.0006179565098,
          0.0006221557269,  0.0006248537102,  0.0006260060472,
          0.0006255740882,  0.0006235257606,  0.0006198355113,
          0.000614485296,   0.0006074644625,  0.0005987705663,
          0.0005884094862,  0.0005763958325,  0.0005627531791,
          0.0005475145299,  0.0005307224346,  0.0005124290474,
          0.0004926967085,  0.0004715977411,  0.0004492145381,
          0.0004256399116,  0.0004009767727,  0.0003753383062,
          0.0003488477378,  0.0003216383629,  0.000293853227,
          0.0002656449506,  0.0002371754526,  0.000208615631,
          0.0001801449253,  0.0001519509678,  0.0001242290018,
          9.718147339e-05,  7.101733354e-05,  4.595150676e-05,
          2.220415627e-05,  -7.405256679e-18, -2.043245513e-05,
          -3.886171544e-05, -5.505414447e-05, -6.877481792e-05,
          -7.978845679e-05, -8.786035323e-05, -9.275732737e-05,
          -9.424874588e-05, -9.210751887e-05, -8.611111116e-05,
          -7.604264101e-05, -6.169188418e-05, -4.28563435e-05,
          -1.934234569e-05, 9.033932656e-06,  4.24453865e-05,
          8.105295274e-05,  0.0001250045607,  0.0001744341425,
          0.0002294606238,  0.0002901869593,  0.0003566992527,
          0.0004290657816,  0.0005073362263,  0.0005915408256,
          0.0006816896494,  0.0007777718129,  0.0008797549526,
          0.0009875844698,  0.001101183356,   0.001220451202,
          0.001345264376,   0.001475475379,   0.001610912615,
          0.001751380507,   0.001896659029,   0.002046504058,
          0.00220064749,    0.002358797006,   0.002520637121,
          0.002685828367,   0.002854008926,   0.00302479486,
          0.003197780112,   0.003372538369,   0.003548622364,
          0.003725566436,   0.003902886296,   0.004080080893,
          0.004256632179,   0.004432008602,   0.004605664406,
          0.004777042661,   0.004945574328,   0.00511068292,
          0.005271783099,   0.005428284407,   0.005579592194,
          0.005725109018,   0.00586423697,    0.005996380001,
          0.006120942999,   0.006237338297,   0.00634498382,
          0.006443305872,   0.00653174147,    0.006609741133,
          0.006676768418,   0.006732304581,   0.006775848567,
          0.006806919351,   0.006825057324,   0.006829828024,
          0.006820821203,   0.006797654554,   0.006759974174,
          0.006707456429,   0.006639810279,   0.006556777749,
          0.006458134856,   0.006343694404,   0.006213305984,
          0.006066857371,   0.005904275924,   0.005725529045,
          0.005530623719,   0.005319609772,   0.005092578474,
          0.004849663936,   0.00459104171,    0.00431693159,
          0.004027594812,   0.003723337082,   0.003404505085,
          0.003071488114,   0.002724717371,   0.002364664804,
          0.001991843106,   0.001606803504,   0.001210136455,
          0.0008024693234,  0.0003844653256,  -4.317743878e-05,
          -0.0004797278962, -0.0009244233952, -0.001376471482,
          -0.001835051691,  -0.002299317624,  -0.002768398495,
          -0.003241402097,  -0.003717415966,  -0.00419551041,
          -0.004674740136,  -0.005154147744,  -0.00563276466,
          -0.006109615322,  -0.006583718583,  -0.007054089569,
          -0.007519744337,  -0.007979701273,  -0.008432984352,
          -0.008878623135,  -0.009315660223,  -0.009743149392,
          -0.01016016025,   -0.01056578103,   -0.01095911954,
          -0.01133930683,   -0.01170550101,   -0.01205688529,
          -0.0123926755,    -0.01271211635,   -0.01301449165,
          -0.01329911686,   -0.01356534846,   -0.01381258201,
          -0.01404025499,   -0.01424784865,   -0.01443488989,
          -0.01460094936,   -0.01474564709,   -0.01486865059,
          -0.0149696786,    -0.01504849829,   -0.01510492712,
          -0.01513883751,   1.098385811,      -0.01513883751,
          -0.01510492712,   -0.01504849829,   -0.0149696786,
          -0.01486865059,   -0.01474564709,   -0.01460094936,
          -0.01443488989,   -0.01424784865,   -0.01404025499,
          -0.01381258201,   -0.01356534846,   -0.01329911686,
          -0.01301449165,   -0.01271211635,   -0.0123926755,
          -0.01205688529,   -0.01170550101,   -0.01133930683,
          -0.01095911954,   -0.01056578103,   -0.01016016025,
          -0.009743149392,  -0.009315660223,  -0.008878623135,
          -0.008432984352,  -0.007979701273,  -0.007519744337,
          -0.007054089569,  -0.006583718583,  -0.006109615322,
          -0.00563276466,   -0.005154147744,  -0.004674740136,
          -0.00419551041,   -0.003717415966,  -0.003241402097,
          -0.002768398495,  -0.002299317624,  -0.001835051691,
          -0.001376471482,  -0.0009244233952, -0.0004797278962,
          -4.317743878e-05, 0.0003844653256,  0.0008024693234,
          0.001210136455,   0.001606803504,   0.001991843106,
          0.002364664804,   0.002724717371,   0.003071488114,
          0.003404505085,   0.003723337082,   0.004027594812,
          0.00431693159,    0.00459104171,    0.004849663936,
          0.005092578474,   0.005319609772,   0.005530623719,
          0.005725529045,   0.005904275924,   0.006066857371,
          0.006213305984,   0.006343694404,   0.006458134856,
          0.006556777749,   0.006639810279,   0.006707456429,
          0.006759974174,   0.006797654554,   0.006820821203,
          0.006829828024,   0.006825057324,   0.006806919351,
          0.006775848567,   0.006732304581,   0.006676768418,
          0.006609741133,   0.00653174147,    0.006443305872,
          0.00634498382,    0.006237338297,   0.006120942999,
          0.005996380001,   0.00586423697,    0.005725109018,
          0.005579592194,   0.005428284407,   0.005271783099,
          0.00511068292,    0.004945574328,   0.004777042661,
          0.004605664406,   0.004432008602,   0.004256632179,
          0.004080080893,   0.003902886296,   0.003725566436,
          0.003548622364,   0.003372538369,   0.003197780112,
          0.00302479486,    0.002854008926,   0.002685828367,
          0.002520637121,   0.002358797006,   0.00220064749,
          0.002046504058,   0.001896659029,   0.001751380507,
          0.001610912615,   0.001475475379,   0.001345264376,
          0.001220451202,   0.001101183356,   0.0009875844698,
          0.0008797549526,  0.0007777718129,  0.0006816896494,
          0.0005915408256,  0.0005073362263,  0.0004290657816,
          0.0003566992527,  0.0002901869593,  0.0002294606238,
          0.0001744341425,  0.0001250045607,  8.105295274e-05,
          4.24453865e-05,   9.033932656e-06,  -1.934234569e-05,
          -4.28563435e-05,  -6.169188418e-05, -7.604264101e-05,
          -8.611111116e-05, -9.210751887e-05, -9.424874588e-05,
          -9.275732737e-05, -8.786035323e-05, -7.978845679e-05,
          -6.877481792e-05, -5.505414447e-05, -3.886171544e-05,
          -2.043245513e-05, -7.405256679e-18, 2.220415627e-05,
          4.595150676e-05,  7.101733354e-05,  9.718147339e-05,
          0.0001242290018,  0.0001519509678,  0.0001801449253,
          0.000208615631,   0.0002371754526,  0.0002656449506,
          0.000293853227,   0.0003216383629,  0.0003488477378,
          0.0003753383062,  0.0004009767727,  0.0004256399116,
          0.0004492145381,  0.0004715977411,  0.0004926967085,
          0.0005124290474,  0.0005307224346,  0.0005475145299,
          0.0005627531791,  0.0005763958325,  0.0005884094862,
          0.0005987705663,  0.0006074644625,  0.000614485296,
          0.0006198355113,  0.0006235257606,  0.0006255740882,
          0.0006260060472,  0.0006248537102,  0.0006221557269,
          0.0006179565098,  0.0006123061175,  0.0006052593817,
          0.0005968756741,  0.0005872184411,  0.0005763546797,
          0.0005643544137,  0.0005512901698,  0.0005372366868,
          0.000522270333,   0.0005064686993,  0.0004899101332,
          0.0004726733023,  0.000454836787,   0.0004364787601,
          0.0004176765797,  0.0003985063813,  0.0003790427872,
          0.0003593586443,  0.0003395246458,  0.0003196091275,
          0.0002996778348,  0.0002797936613,  0.0002600165026,
          0.0002404030529,  0.0002210067323,  0.0002018774831,
          0.0001830617548,  0.0001646023593,  0.0001465385285,
          0.0001289058127,  0.000111736088,   9.505763592e-05,
          7.889513654e-05,  6.32697338e-05,   4.819915193e-05,
          3.369775732e-05,  1.97766949e-05,   6.444005066e-06,
          -6.295228104e-06, -1.843872269e-05, -2.998683522e-05,
          -4.09423883e-05,  -5.131048965e-05, -6.109834067e-05,
          -7.031505811e-05, -7.897144678e-05, -8.707985398e-05,
          -9.465392213e-05, -0.0001017084214, -0.0001082590607,
          -0.0001143222762, -0.0001199150574, -0.0001250547793,
          -0.0001297590061, -0.00013404536,   -0.0001379313326,
          -0.0001414341677, -0.0001445707312, -0.0001473573502,
          -0.0001498097554, -0.0001519429497, -0.0001537711214,
          -0.0001553076145, -0.0001565648272, -0.0001575541974,
          -0.000158286115,  -0.000158770039,  -0.0001590143074};
      std::copy(bk, bk + NOTCH_SIZE, hn.get());

      _ffilter.set_block_size(buffer_size());

      // and tell it the impulse response of the filter
      _ffilter.set_filter(hn.get(), NOTCH_SIZE, 2 * buffer_size() - 1);
    } break;
    case filter_type::BandPass: {
      // let the freq_filter know the length of the block_size

      std::unique_ptr<float[]> hn(new float[buffer_size()]);
      memset(hn.get(), 0, sizeof(float) * buffer_size());

      float bk[BANDPASS_SIZE] = {
          8.582186274e-05,  0.0001114571351,  0.0001360819151,
          0.0001587667357,  0.0001786349603,  0.0001948973659,
          0.0002068840695,  0.000214072832,   0.000216112574,
          0.000212841027,   0.0002042958658,  0.0001907185506,
          0.0001725504262,  0.0001504209213,  0.0001251277863,
          9.760988905e-05,  6.891311205e-05,  4.01503421e-05,
          1.245682415e-05,  -1.305753631e-05, -3.535719225e-05,
          -5.35292711e-05,  -6.682916865e-05, -7.472121797e-05,
          -7.691242354e-05, -7.33773486e-05,  -6.437248521e-05,
          -5.043876445e-05, -3.239142461e-05, -1.129678822e-05,
          1.156376857e-05,  3.474184996e-05,  5.668064841e-05,
          7.578207442e-05,  9.047985077e-05,  9.931555542e-05,
          0.0001010142514,  9.455607506e-05,  7.924030797e-05,
          5.473825877e-05,  2.113198934e-05,  -2.106399188e-05,
          -7.090000145e-05, -0.0001270087523, -0.0001876434835,
          -0.0002507362515, -0.0003139744804, -0.0003748933668,
          -0.0004309806391, -0.000479789247,  -0.0005190529046,
          -0.0005467996234, -0.0005614567199, -0.0005619431613,
          -0.0005477423547, -0.0005189527874, -0.0004763109901,
          -0.0004211860942, -0.0003555428702, -0.000281875371,
          -0.0002031111071, -0.000122490339,  -4.342397733e-05,
          3.066331919e-05,  9.649832646e-05,  0.0001511250448,
          0.0001920629438,  0.0002174497495,  0.0002261609334,
          0.0002178988943,  0.0001932461455,  0.0001536781056,
          0.0001015327798,  3.993688006e-05,  -2.731023596e-05,
          -9.589116962e-05, -0.0001611579501, -0.0002183448669,
          -0.0002627975773, -0.0002902080014, -0.0002968441695,
          -0.0002797633933, -0.0002369978756, -0.0001677023538,
          -7.225506124e-05, 4.769502266e-05,  0.000189239523,
          0.0003482824832,  0.0005196720012,  0.0006973880227,
          0.0008747800603,  0.001044844743,   0.001200533006,
          0.001335071865,   0.001442287816,   0.001516915159,
          0.001554873888,   0.001553503796,   0.001511740498,
          0.001430223463,   0.001311327913,   0.001159115811,
          0.0009792050114,  0.0007785599446,  0.000565211114,
          0.0003479121078,  0.0001357506553,  -6.227155973e-05,
          -0.0002376704069, -0.0003829022753, -0.00049175811,
          -0.0005597081035, -0.0005841793027, -0.0005647498183,
          -0.0005032473127, -0.0004037430626, -0.0002724388905,
          -0.0001174464051, 5.153306847e-05,  0.0002236180298,
          0.0003872289089,  0.0005306228413,  0.0006424578605,
          0.0007123604883,  0.0007314706454,  0.0006929361261,
          0.0005923322751,  0.0004279839923,  0.0002011704928,
          -8.380036888e-05, -0.0004196571826, -0.0007963714888,
          -0.001201501233,  -0.00162066007,   -0.002038095612,
          -0.002437352203,  -0.002801992698,  -0.003116344335,
          -0.003366237739,  -0.003539702389,  -0.00362758548,
          -0.003624061123,  -0.003527004737,  -0.003338207956,
          -0.003063419834,  -0.002712205751,  -0.00229762448,
          -0.001835733186,  -0.001344934688,  -0.0008451954345,
          -0.0003571643028, 9.877057892e-05,  0.0005034432979,
          0.0008398471982,  0.001094002393,   0.001255710609,
          0.001319158939,   0.00128333841,    0.001152251032,
          0.0009348900057,  0.0006449834327,  0.0003005072649,
          -7.701946015e-05, -0.0004634314973, -0.0008329720004,
          -0.001159461332,  -0.001417530351,  -0.001583863283,
          -0.001638393616,  -0.00156539469,   -0.001354413223,
          -0.001000994467,  -0.0005071603809, 0.0001183921049,
          0.0008603906026,  0.00169739197,    0.00260248431,
          0.003544265637,   0.004488063976,   0.005397352856,
          0.006235307083,   0.006966426969,   0.007558167912,
          0.007982497104,   0.008217305876,   0.008247604594,
          0.008066445589,   0.007675516419,   0.007085369434,
          0.006315253675,   0.00539255701,    0.004351856187,
          0.003233608557,   0.002082528779,   0.0009457104024,
          -0.0001294323738, -0.001097319066,  -0.001916361856,
          -0.002551032463,  -0.002973743482,  -0.003166452982,
          -0.003121910384,  -0.00284447521,   -0.002350456314,
          -0.001667935634,  -0.000836063351,  9.616538591e-05,
          0.001071622944,   0.002027197275,   0.00289630075,
          0.003611651948,   0.004108219873,   0.004326217342,
          0.004214018583,   0.003730880795,   0.002849342767,
          0.001557195908,   -0.0001410738769, -0.002223449759,
          -0.004650213756,  -0.007364470512,  -0.01029337756,
          -0.0133500509,    -0.01643610001,   -0.01944472454,
          -0.02226425149,   -0.02478200942,   -0.02688840032,
          -0.02848101594,   -0.02946863137,   -0.02977496013,
          -0.02934197336,   -0.02813269012,   -0.02613329515,
          -0.02335449494,   -0.01983204857,   -0.01562643796,
          -0.01082164794,   -0.005523116328,  0.0001451219141,
          0.006043983158,   0.01202347595,    0.01792728901,
          0.02359767072,    0.02888043225,    0.03362990171,
          0.03771363571,    0.04101676121,    0.04344572499,
          0.04493141174,    0.04543140531,    0.04493141174,
          0.04344572499,    0.04101676121,    0.03771363571,
          0.03362990171,    0.02888043225,    0.02359767072,
          0.01792728901,    0.01202347595,    0.006043983158,
          0.0001451219141,  -0.005523116328,  -0.01082164794,
          -0.01562643796,   -0.01983204857,   -0.02335449494,
          -0.02613329515,   -0.02813269012,   -0.02934197336,
          -0.02977496013,   -0.02946863137,   -0.02848101594,
          -0.02688840032,   -0.02478200942,   -0.02226425149,
          -0.01944472454,   -0.01643610001,   -0.0133500509,
          -0.01029337756,   -0.007364470512,  -0.004650213756,
          -0.002223449759,  -0.0001410738769, 0.001557195908,
          0.002849342767,   0.003730880795,   0.004214018583,
          0.004326217342,   0.004108219873,   0.003611651948,
          0.00289630075,    0.002027197275,   0.001071622944,
          9.616538591e-05,  -0.000836063351,  -0.001667935634,
          -0.002350456314,  -0.00284447521,   -0.003121910384,
          -0.003166452982,  -0.002973743482,  -0.002551032463,
          -0.001916361856,  -0.001097319066,  -0.0001294323738,
          0.0009457104024,  0.002082528779,   0.003233608557,
          0.004351856187,   0.00539255701,    0.006315253675,
          0.007085369434,   0.007675516419,   0.008066445589,
          0.008247604594,   0.008217305876,   0.007982497104,
          0.007558167912,   0.006966426969,   0.006235307083,
          0.005397352856,   0.004488063976,   0.003544265637,
          0.00260248431,    0.00169739197,    0.0008603906026,
          0.0001183921049,  -0.0005071603809, -0.001000994467,
          -0.001354413223,  -0.00156539469,   -0.001638393616,
          -0.001583863283,  -0.001417530351,  -0.001159461332,
          -0.0008329720004, -0.0004634314973, -7.701946015e-05,
          0.0003005072649,  0.0006449834327,  0.0009348900057,
          0.001152251032,   0.00128333841,    0.001319158939,
          0.001255710609,   0.001094002393,   0.0008398471982,
          0.0005034432979,  9.877057892e-05,  -0.0003571643028,
          -0.0008451954345, -0.001344934688,  -0.001835733186,
          -0.00229762448,   -0.002712205751,  -0.003063419834,
          -0.003338207956,  -0.003527004737,  -0.003624061123,
          -0.00362758548,   -0.003539702389,  -0.003366237739,
          -0.003116344335,  -0.002801992698,  -0.002437352203,
          -0.002038095612,  -0.00162066007,   -0.001201501233,
          -0.0007963714888, -0.0004196571826, -8.380036888e-05,
          0.0002011704928,  0.0004279839923,  0.0005923322751,
          0.0006929361261,  0.0007314706454,  0.0007123604883,
          0.0006424578605,  0.0005306228413,  0.0003872289089,
          0.0002236180298,  5.153306847e-05,  -0.0001174464051,
          -0.0002724388905, -0.0004037430626, -0.0005032473127,
          -0.0005647498183, -0.0005841793027, -0.0005597081035,
          -0.00049175811,   -0.0003829022753, -0.0002376704069,
          -6.227155973e-05, 0.0001357506553,  0.0003479121078,
          0.000565211114,   0.0007785599446,  0.0009792050114,
          0.001159115811,   0.001311327913,   0.001430223463,
          0.001511740498,   0.001553503796,   0.001554873888,
          0.001516915159,   0.001442287816,   0.001335071865,
          0.001200533006,   0.001044844743,   0.0008747800603,
          0.0006973880227,  0.0005196720012,  0.0003482824832,
          0.000189239523,   4.769502266e-05,  -7.225506124e-05,
          -0.0001677023538, -0.0002369978756, -0.0002797633933,
          -0.0002968441695, -0.0002902080014, -0.0002627975773,
          -0.0002183448669, -0.0001611579501, -9.589116962e-05,
          -2.731023596e-05, 3.993688006e-05,  0.0001015327798,
          0.0001536781056,  0.0001932461455,  0.0002178988943,
          0.0002261609334,  0.0002174497495,  0.0001920629438,
          0.0001511250448,  9.649832646e-05,  3.066331919e-05,
          -4.342397733e-05, -0.000122490339,  -0.0002031111071,
          -0.000281875371,  -0.0003555428702, -0.0004211860942,
          -0.0004763109901, -0.0005189527874, -0.0005477423547,
          -0.0005619431613, -0.0005614567199, -0.0005467996234,
          -0.0005190529046, -0.000479789247,  -0.0004309806391,
          -0.0003748933668, -0.0003139744804, -0.0002507362515,
          -0.0001876434835, -0.0001270087523, -7.090000145e-05,
          -2.106399188e-05, 2.113198934e-05,  5.473825877e-05,
          7.924030797e-05,  9.455607506e-05,  0.0001010142514,
          9.931555542e-05,  9.047985077e-05,  7.578207442e-05,
          5.668064841e-05,  3.474184996e-05,  1.156376857e-05,
          -1.129678822e-05, -3.239142461e-05, -5.043876445e-05,
          -6.437248521e-05, -7.33773486e-05,  -7.691242354e-05,
          -7.472121797e-05, -6.682916865e-05, -5.35292711e-05,
          -3.535719225e-05, -1.305753631e-05, 1.245682415e-05,
          4.01503421e-05,   6.891311205e-05,  9.760988905e-05,
          0.0001251277863,  0.0001504209213,  0.0001725504262,
          0.0001907185506,  0.0002042958658,  0.000212841027,
          0.000216112574,   0.000214072832,   0.0002068840695,
          0.0001948973659,  0.0001786349603,  0.0001587667357,
          0.0001360819151,  0.0001114571351,  8.582186274e-05};

      std::copy(bk, bk + BANDPASS_SIZE, hn.get());

      _ffilter.set_block_size(buffer_size());

      // and tell it the impulse response of the filter
      _ffilter.set_filter(hn.get(), BANDPASS_SIZE, 2 * buffer_size() - 1);
    } break;
    default: {
      // let the freq_filter know the length of the block_size

      std::unique_ptr<float[]> delta(new float[buffer_size()]);
      memset(delta.get(), 0, sizeof(float) * buffer_size());
      delta[0] = 1.0f;

      // let the freq_filter know the length of the block_size
      _ffilter.set_block_size(buffer_size());

      // and tell it the impulse response of the filter
      _ffilter.set_filter(delta.get(), buffer_size(), 2 * buffer_size() - 1);
    } break;
  }
}

void dsp_client::set_filter_type(filter_type type) {
  _current_type_fft_filter = type;
  change_filter_type();
}

void dsp_client::set_buffer_size(const jack_nframes_t buffer_size) {
  // Primero llamamos a la función del padre
  jack::client::set_buffer_size(buffer_size);
  if (!_first_run) {
    change_filter_type();
    return;
  }
  _first_run = false;
}

void dsp_client::passthrough(jack_nframes_t nframes, const sample_t *const in,
                             sample_t *const out) {
  for (jack_nframes_t i = 0; i < nframes; ++i) {
    out[i] = in[i];
  }
}

void dsp_client::reset_values_filters() {
  x1 = 0.0f;
  x2 = 0.0f;
  y1 = 0.0f;
  y2 = 0.0f;
}

void dsp_client::low_pass_filter(jack_nframes_t nframes,
                                 const sample_t *const x, sample_t *const y) {
  for (jack_nframes_t i = 0; i < nframes; i++) {
    y[i] = -a_lp[1] * y1 - a_lp[2] * y2 + b_lp[0] * x[i] + b_lp[1] * x1 +
           b_lp[2] * x2;
    x2 = x1;
    x1 = x[i];
    y2 = y1;
    y1 = y[i];
  }
}

void dsp_client::band_stop_filter(jack_nframes_t nframes,
                                  const sample_t *const x, sample_t *const y) {
  for (jack_nframes_t i = 0; i < nframes; i++) {
    y[i] = -a_bs[1] * y1 - a_bs[2] * y2 + b_bs[0] * x[i] + b_bs[1] * x1 +
           b_bs[2] * x2;
    x2 = x1;
    x1 = x[i];
    y2 = y1;
    y1 = y[i];
  }
}

void dsp_client::band_pass_filter(jack_nframes_t nframes,
                                  const sample_t *const x, sample_t *const y) {
  for (jack_nframes_t i = 0; i < nframes; i++) {
    y[i] = -a_bp[1] * y1 - a_bp[2] * y2 + b_bp[0] * x[i] + b_bp[1] * x1 +
           b_bp[2] * x2;
    x2 = x1;
    x1 = x[i];
    y2 = y1;
    y1 = y[i];
  }
}

void dsp_client::high_pass_filter(jack_nframes_t nframes,
                                  const sample_t *const x, sample_t *const y) {
  for (jack_nframes_t i = 0; i < nframes; i++) {
    y[i] = -a_hp[1] * y1 - a_hp[2] * y2 + b_hp[0] * x[i] + b_hp[1] * x1 +
           b_hp[2] * x2;
    x2 = x1;
    x1 = x[i];
    y2 = y1;
    y1 = y[i];
  }
}